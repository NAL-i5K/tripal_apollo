<?php

/**
 * @file
 * Install, update and uninstall functions for the node module.
 */


/**
 * Implements hook_install().
 */

function tripal_apollo_install() {
  //the python variable is set by the admin but we set the default here.
  variable_set('tripal_apollo_python_path', "/usr/local/bin/python2.7");
  variable_set('tripal_apollo_base_table', "organism");

}

/**
 * Implements hook_schema().
 */
function tripal_apollo_schema() {

  $schema['apollo_instance'] = [
    'description' => "Apollo instance table.  Each instance is a specific Apollo server.",
    'fields' => [
      'id' => [
        'description' => t('Apollo Instance ID'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'nid' => [
        'description' => t('The primary identifier for a node.'),
        'type' => 'int',
      ],
      'url' => [
        'not null' => TRUE,
        'type' => 'varchar',
        'length' => 64,
      ],
      'name' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'Descriptive name for the instance.',
      ],
      'database_name' => [
        'not null' => TRUE,
        'type' => 'varchar',
        'length' => 64,
        'description' => 'Database name on the Apollo instance.',

      ],
      'admin_name' => [
        'not null' => TRUE,
        'type' => 'varchar',
        'length' => 64,
        'description' => 'Database admin username on the Apollo instance.',

      ],
      'admin_password' => [
        'not null' => TRUE,
        'type' => 'varchar',
        'length' => 64,
        'description' => "Database admin password on the Apollo instance",
      ],
      'apollo_version' => [
        'type' => 'int',
        'size' => 'small'
        //1 or 2
      ],
      'base_table' => [
        'type' => 'varchar',
        'length' => 64,
        'description' => 'The chado base table this instance is associated with.  It could be organism, project, or analysis.',
      ],
    ],
    'unique keys' => [
      'URL' => ['URL'],
      'name' => ['name'],
      'nid' => ['nid'],
    ],
    'primary key' => ['id'],
  ];

  $schema = tripal_apollo_add_instance_user_organism_schemas($schema);


  //TODO: should we ditch this? Instead link drupal users to chado contacts.

  $schema['webapollo_users'] = [
    'description' => 'Web apollo users table.',
    'fields' => [
      'uid' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique user ID.',
      ],
      'name' => [
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique user name.',
      ],
      'pass' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's password (md5 hash).",
      ],
      'email' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'default' => '',
        'description' => "User's email address.",
      ],
      'organisms' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Organisms',
      ],
      'institution' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Institution',
      ],
      'comment' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'The comment body.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when user was created.',
      ],
      'status' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 2,
        'size' => 'tiny',
        'description' => 'Whether the user is active(1/2) or blocked(0).  ALSO if this instance is an apollo 1 (1) or apollo 2 (2) instance.',
      ],
    ],
    'unique keys' => [
      'email_organism' => ['email', 'organisms'],
    ],
    'primary key' => ['uid'],
  ];

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function tripal_apollo_uninstall() {
  // Remove records from variable table.
  variable_del('web_apollo_organism');
  variable_del('web_apollo_recipients');
  variable_del('tripal_apollo_python_path');


  /**
   * Remove all Apollo nodes
   */


  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'apollo')
    // Restrict to Published nodes.
    ->propertyCondition('status', 1)
    // Restrict to nodes the current user has permission to view.
    ->addTag('node_access');
  $entities = $query->execute();

  // Get all apollo nodes and delete them
  $nodes = node_load_multiple(array_keys($entities['node']));
  foreach ($nodes as $node) {
    print "Delete node " . $node->title . "\n";
    $nrs = node_revision_list($node);
    foreach ($nrs as $nr) {
      node_revision_delete($nr->vid);
    }
    node_delete($node->nid);

  }

}


/**
 * Adds the apollo_instance_record and apollo_user schemas
 *
 * @param $schema
 *
 * @return mixed
 */
function tripal_apollo_add_instance_user_organism_schemas($schema) {

  $schema['apollo_instance_record'] = [
    'description' => "Simple linker table to associate chado records with apollo instances.",
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary key: apollo_instance_organism id',
      ],
      'instance_id' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => "Apollo instance id, as specified in apollo_instance",
      ],
      'record_id' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => "Chado primary record ID for the corresponding instance base table.",
      ],
      //TODO:  move to site variable.
      'base_table' => [
        'type' => 'varchar',
        'length' => 64,
        'description' => 'The base table for the record.',
      ],
    ],
    'unique keys' => [
      'apollo_instance_record_uq1' => ['record_id'],
    ],
    'primary key' => ['id'],
  ];


  $schema['apollo_user_record'] = [
    'description' => 'links web apollo user IDs to chado records.  A user can have access to multiple (but not all) records on a given instance.  A record may only be found on one instances.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'record_id' => [
        'type' => 'int',
        'description' => 'chado organism.organism_id',
        'not null' => TRUE,
      ],
      'apollo_user_id' => [
        'type' => 'int',
        'description' => 'apollo_user.id',
        'not null' => TRUE,
      ],
      'status' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 2,
        'size' => 'tiny',
        'description' => "Request status.  0 = rejected, 1 = approved, 2 = pending",
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when user was created.',
      ],
    ],
    'primary_key' => ['id'],
    'unique keys' => [
      'apollo_user_record_u1' => ['record_id', 'apollo_user_id'],
    ],
  ];

  $schema['apollo_user'] = [
    'description' => 'Web apollo users table.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'uid' => [
        'type' => 'int',
        //nullable to support sites who want to allow registration-free requests
        'description' => 'Drupal user ID',
      ],
      'name' => [
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique user name.',
      ],
      'pass' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's password (md5 hash).",
      ],
      'email' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's email address.",
      ],
      'institution' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Institution',
      ],
      'comment' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'The comment body.',
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      'email' => ['email'],
      'uid' => ['uid'],

    ],
  ];
  return $schema;
}
//
///**
// * Creates new schema tables for instances, users, and organisms.  Migrates users from the old schema to the new one if possible via email.
// */
//function tripal_apollo_update_7100() {
//
//  $schema = [];
//
//  $schema = tripal_apollo_add_instance_user_organism_schemas($schema);
//
//  //migrate webapollo_users to new schema
//
//
//  $user_emails = db_select('public.webapollo_users', 't')
//    ->fields('t', ['email'])
//    ->distinct()
//    ->select()
//    ->execute();
//
//  foreach ($user_emails as $email){
//
//    //Do not confuse this with webapollo_users.uid they are not the same.
//    $uid = db_select('public.users', 't')
//      ->addField('t', 'uid')
//      ->condition('mail', $email)
//      ->execute()
//      ->fetchField();
//
//    if (!$uid){
//      print("Unable to migrate user: " . $email . ".\nThey will not lose access, but their Drupal account will not be linked to Apollo.");
//      continue;
//    }
//
//    $credentials = db_select('public.webapollo_users', 't')
//      ->fields('t')
//      ->condition('email', $email)
//      ->select()
//      ->execute()
//      ->fetchAll();
//
//    $apollo_credentials = [];
//
//    foreach ($credentials as $credential){
//      $name = $credential->name;
//      $pass = $credential->pass;
//      $organism = $credential->organisms;
//      $institution = $credential->institution;
//      $comment = $credential->comment;
//      $created = $credential->created;
//      $status = $credential->status;
//
//      $id  = db_select('public.apollo_user', 't')
//        ->fields('id')
//        ->condition('name', $name)
//        ->condition('pass', $pass)
//        ->condition('institution', $institution)
//        ->condition('email', $email)
//        ->execute()
//        ->fetchField();
//
//      if (!$id){
//        $id = db_insert('public.apollo_user', 't')
//        ->fields([
//          'uid' => $uid,
//          'name' => $name,
//          'pass' => $pass,
//          'email' => $email,
//          'institution' => $institution,
//          'comment' => $comment,
//          'created' => $created
//        ])
//        ->execute();
//      }
//
//      //TODO: I need to use the web_apollo organism api to figure out which organism this is in chado unfortunately.
//      $organism_id = chado_get_organism(['organism_id' => "shoot i dont know, i have a string"]);
//      //Add this organism instance
//      db_insert('public.apollo_user_organism_instance')
//        ->fields([
//          'organism_id' ,
//          'instance_id' => 1,
//          'apollo_user_id' =>$id
//        ])
//        ->execute();
//
//
//    }
//
//  }
//  //TODO unfinished because of above issue.
//  //Drop webapollo_users
//}
