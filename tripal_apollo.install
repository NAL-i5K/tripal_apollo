<?php

/**
 * @file
 * Install, update and uninstall functions for the node module.
 */


/**
 * Implements hook_install().
 */

function tripal_apollo_install() {
  //the python variable is set by the admin but we set the default here.
  variable_set('tripal_apollo_python_path', "/usr/local/bin/python2.7");
  variable_set('tripal_apollo_base_table', "organism");

  variable_set('tripal_apollo_encrypt', FALSE);
  
}

/**
 * Implements hook_schema().
 */
function tripal_apollo_schema() {

  $schema['apollo_instance'] = [
    'description' => "Apollo instance table.  Each instance is a specific Apollo server.",
    'fields' => [
      'id' => [
        'description' => t('Apollo Instance ID'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'nid' => [
        'description' => t('The primary identifier for a node.'),
        'type' => 'int',
      ],
      'url' => [
        'not null' => TRUE,
        'type' => 'varchar',
        'length' => 64,
      ],
      'name' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'Descriptive name for the instance.',
      ],
      'database_name' => [
        'not null' => FALSE,
        'type' => 'varchar',
        'length' => 64,
        'description' => 'Database name on the Apollo instance.  Only required for Apollo 1.',

      ],
      'admin_name' => [
        'not null' => TRUE,
        'type' => 'varchar',
        'length' => 64,
        'description' => 'Admin username on the Apollo instance.  For Apollo 1 this is the db user name, for Apollo 2 it is the apollo username.',

      ],
      'admin_password' => [
        'not null' => TRUE,
        'type' => 'varchar',
        'length' => 64,
        'description' => "Admin password on the Apollo instance.  For Apollo 1 this is the db user password, for Apollo 2 it is the apollo user's password.",
      ],
      'apollo_version' => [
        'type' => 'int',
        'size' => 'small'
        //1 or 2
      ],
    ],
    'unique keys' => [
      'URL' => ['URL'],
      'name' => ['name'],
      'nid' => ['nid'],
    ],
    'primary key' => ['id'],
  ];

  $schema = tripal_apollo_add_instance_user_organism_schemas($schema);


  //TODO: should we ditch this? Instead link drupal users to chado contacts.

  $schema['webapollo_users'] = [
    'description' => 'Web apollo users table.',
    'fields' => [
      'uid' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique user ID.',
      ],
      'name' => [
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique user name.',
      ],
      'pass' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's password (md5 hash).",
      ],
      'email' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'default' => '',
        'description' => "User's email address.",
      ],
      'organisms' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Organisms',
      ],
      'institution' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Institution',
      ],
      'comment' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'The comment body.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when user was created.',
      ],
      'status' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 2,
        'size' => 'tiny',
        'description' => 'Whether the user is active(1/2) or blocked(0).  ALSO if this instance is an apollo 1 (1) or apollo 2 (2) instance.',
      ],
    ],
    'unique keys' => [
      'email_organism' => ['email', 'organisms'],
    ],
    'primary key' => ['uid'],
  ];

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function tripal_apollo_uninstall() {
  // Remove records from variable table.
  variable_del('web_apollo_organism');
  variable_del('web_apollo_recipients');
  variable_del('tripal_apollo_python_path');


  /**
   * Remove all Apollo nodes
   */


  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'apollo_instance')
    // Restrict to Published nodes.
    ->propertyCondition('status', 1)
    // Restrict to nodes the current user has permission to view.
    ->addTag('node_access');
  $entities = $query->execute();

  // Get all apollo nodes and delete them
  $nodes = node_load_multiple(array_keys($entities['node']));
  foreach ($nodes as $node) {
    print "Delete node " . $node->title . "\n";
    $nrs = node_revision_list($node);
    foreach ($nrs as $nr) {
      node_revision_delete($nr->vid);
    }
    node_delete($node->nid);

  }

}


/**
 * Adds the apollo_instance_record and apollo_user schemas
 *
 * @param $schema
 *
 * @return mixed
 */
function tripal_apollo_add_instance_user_organism_schemas($schema) {

  $schema['apollo_instance_record'] = [
    'description' => "Simple linker table to associate chado records with apollo instances.",
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary key: apollo_instance_organism id',
      ],
      'instance_id' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => "Apollo instance id, as specified in apollo_instance",
      ],
      'record_id' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => "Chado primary record ID for the corresponding instance base table.",
      ],
    ],
    'unique keys' => [
      'apollo_instance_record_uq1' => ['record_id'],
    ],
    'primary key' => ['id'],
    'foreign keys' => [
      'instance_id' => [
        'table' => 'apollo_instance',
        'columns' => [
          'job_id' => 'id',
        ],
      ],
    ],
  ];


  $schema['apollo_user_record'] = [
    'description' => 'links web apollo user IDs to chado records.  A user can have access to multiple (but not all) records on a given instance.  A record may only be found on one instances.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'record_id' => [
        'type' => 'int',
        'description' => 'chado organism.organism_id',
        'not null' => TRUE,
      ],
      'apollo_user_id' => [
        'type' => 'int',
        'description' => 'apollo_user.id',
        'not null' => TRUE,
      ],
      'status' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 2,
        'size' => 'tiny',
        'description' => "Request status.  0 = rejected, 1 = approved, 2 = pending",
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when user was created.',
      ],
    ],
    'primary_key' => ['id'],
    'unique keys' => [
      'apollo_user_record_u1' => ['record_id', 'apollo_user_id'],
    ],
    'foreign keys' => [
      'apollo_user_id' => [
        'table' => 'apollo_user',
        'columns' => [
          'job_id' => 'id',
        ],
      ],
    ],
  ];

  $schema['apollo_user'] = [
    'description' => 'Web apollo users table.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'uid' => [
        'type' => 'int',
        //nullable to support sites who want to allow registration-free requests
        'description' => 'Drupal user ID',
      ],
      'name' => [
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique user name.',
      ],
      'pass' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's password (md5 hash).",
      ],
      'email' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's email address.",
      ],
      'institution' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Institution',
      ],
      'comment' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'The comment body.',
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      'email' => ['email'],
    ],
    'foreign keys' => [
      'uid' => [
        'table' => 'users',
        'columns' => [
          'uid' => 'uid',
        ],
      ],
    ],
  ];
  return $schema;
}